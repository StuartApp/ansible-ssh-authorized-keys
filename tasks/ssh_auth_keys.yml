---

- name: Create ssh keys list
  set_fact:
    ssh_authorized_keys_list: |
      {# # Create a special loop variable #}
      {% set ssh_keys_ns = namespace(users=[], ssh_keys=[]) -%}

      {# # Loop current remote user groups #}
      {% for group in ssh_authorized_keys_loop_users.value.auth_keys %}
      {#   # From groups in list, get users #}
      {%   for item in ((ssh_authorized_keys_groups[group] | default([group])) | intersect(ssh_authorized_keys_groups.keys())) %}
      {%     set ssh_keys_ns.users = ssh_keys_ns.users + ssh_authorized_keys_groups[item] %}
      {%   endfor -%}
      {#   # The rest are no groups but actual users #}
      {%   for item in ((ssh_authorized_keys_groups[group] | default([group])) | difference(ssh_authorized_keys_groups.keys())) %}
      {#     # In order to add individual items to a list, we surround it with [] so it combine lists #}
      {%     set ssh_keys_ns.users = ssh_keys_ns.users + [item] %}
      {%   endfor %}
      {% endfor -%}

      {# # Build final SSH keys list with gathered users #}
      {% for item in (ssh_keys_ns.users|unique) %}
      {%   set ssh_keys_ns.ssh_keys = ssh_keys_ns.ssh_keys + ssh_authorized_keys_users[item] %}
      {% endfor -%}

      {# # Print the keys #}
      {{ssh_keys_ns.ssh_keys}}

- name: SSH authorized key
  authorized_key:
    user: "{{ ssh_authorized_keys_loop_users.key }}"
    key: "{{ ssh_authorized_keys_list | join('\n') }}"
    manage_dir: "{{ ssh_authorized_keys_loop_users.value.manage_dir|default(ssh_authorized_keys_manage_dir) }}"
    exclusive: "{{ ssh_authorized_keys_loop_users.value.exclusive|default(ssh_authorized_keys_exclusive) }}"
    path: "{{ssh_authorized_keys_loop_users.value.path|default(omit)}}"
  register: authorized_key_result
  failed_when: authorized_key_result is failed and (('Failed to lookup user' not in authorized_key_result.msg and not ssh_authorized_key_fail_no_user) or  ssh_authorized_key_fail_no_user)
